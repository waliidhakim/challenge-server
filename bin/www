#!/usr/bin/env node
require('dotenv').config({path : './config.env'})
const { MongoClient, ServerApiVersion } = require('mongodb')
const cors = require('cors')
const socketHandler = require('../sockets')

const dbPostgres = require('../db/postGres/config/dbPostgres');

const mongoose = require('mongoose')
// try {
//   mongoose.connect(`mongodb+srv://${process.env.MONGODB_USER}:${process.env.MONGODB_PASS}@${process.env.MONGODB_HOST}/${process.env.MONGODB_DB}?retryWrites=true&w=majority`, {useNewUrlParser: true, useUnifiedTopology: true});
//   //console.log('MongoDB Connection Successfull');
// } catch (error) {
//   console.log('MongoDB Client Error', error)
// }

//MongoDb Connection
const DB = process.env.DATABASE.replace('<PASSWORD>', process.env.DATABASE_PASSWORD);
mongoose.connect(DB,{
    useNewUrlParser:true,
    // useCreateIndex: true,
    // useFindAndModify:false
}).then((con)=>{
    console.log("MongoDB connection successfull");
});

//PostGres Connection
dbPostgres.sync()
  .then(() => {
    console.log('Connexion to Postgres successfull');
  })
  .catch((err) => {
    console.error('Postgres Synchronization error  : ', err);
  });

var app = require('../app')
var debug = require('debug')
var http = require('http')

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

var server = http.createServer(app)


const corsOptions = {
  origin: '*',  // replace with your client app's url
  methods: ['GET', 'POST']
}
app.use(cors(corsOptions))

const io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});

socketHandler(io)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

if (process.env.FORCE_ENV) {
  process.env.ENV = process.env.FORCE_ENV.trim();
  process.env.FRONT_APP_URL = process.env.FRONT_APP_URL_PROD.trim();
}

console.log("FRONT APP URL :", process.env.FRONT_APP_URL);

function normalizePort(val) {
    var port = parseInt(val, 10)
  
    if (isNaN(port)) {
      // named pipe
      return val
    }
  
    if (port >= 0) {
      // port number
      return port
    }
    return false
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break;
      default:
        throw error
    }
  }

  function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    debug('Listening on ' + bind)
  }
